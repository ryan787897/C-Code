import components.simplereader.SimpleReader;
import components.simplereader.SimpleReader1L;
import components.simplewriter.SimpleWriter;
import components.simplewriter.SimpleWriter1L;
import components.xmltree.XMLTree;
import components.xmltree.XMLTree1;

/**
 * Program to convert an XML RSS (version 2.0) feed from a given URL into the
 * corresponding HTML output file.
 *
 * @author Put your name here
 *
 */
public final class RSSReader {

    /**
     * Private constructor so this utility class cannot be instantiated.
     */
    private RSSReader() {
    }

    /**
     * Outputs the "opening" tags in the generated HTML file. These are the
     * expected elements generated by this method:
     *
     * <html> <head> <title>the channel tag title as the page title</title>
     * </head> <body>
     * <h1>the page title inside a link to the <channel> link</h1>
     * <p>
     * the channel description
     * </p>
     * <table border="1">
     * <tr>
     * <th>Date</th>
     * <th>Source</th>
     * <th>News</th>
     * </tr>
     *
     * @param channel
     *            the channel element XMLTree
     * @param out
     *            the output stream
     * @updates out.content
     * @requires [the root of channel is a <channel> tag] and out.is_open
     * @ensures out.content = #out.content * [the HTML "opening" tags]
     */
    private static void outputHeader(XMLTree channel, SimpleWriter out) {
        assert channel != null : "Violation of: channel is not null";
        assert out != null : "Violation of: out is not null";
        assert channel.isTag() && channel.label().equals("channel") : ""
                + "Violation of: the label root of channel is a <channel> tag";
        assert out.isOpen() : "Violation of: out.is_open";

        int it = 0;
        int il = 0; //initalizes variables
        int id = 0;
        it = getChildElement(channel, "title");
        il = getChildElement(channel, "link"); // uses getChildElement method to find children with the string
        id = getChildElement(channel, "description");

        XMLTree title = channel.child(it).child(0); // intializes title, urlN to location
        String urlN = channel.child(il).child(0).label();
        String description;

        String hold = "<a href=\"" + urlN + "\">" + title + "</a>"; //outputs title in html
        out.println("<html><h1>" + hold + "</h1></html>");
        if (id > 0) { //description needs to be greater that zero or no description
            description = channel.child(id).child(0).label();
        } else {
            description = " No descrition";
        }
        out.print("<body>");
        out.println("<p>" + description + "</p>");

        out.println("<table style=\"width:100%\"border=\"1\">");
        out.println("<tr>");
        out.println("<th>Date</th>"); //creates top of table
        out.println("<th>Source</th>");
        out.println("<th>News</th>");
        out.println("</tr>");
    }

    /**
     * Outputs the "closing" tags in the generated HTML file. These are the
     * expected elements generated by this method:
     *
     * </table>
     * </body> </html>
     *
     * @param out
     *            the output stream
     * @updates out.contents
     * @requires out.is_open
     * @ensures out.content = #out.content * [the HTML "closing" tags]
     */
    private static void outputFooter(SimpleWriter out) {
        assert out != null : "Violation of: out is not null";
        assert out.isOpen() : "Violation of: out.is_open";

        /*
         * TODO: fill in body
         */
        out.println("</table>");
        out.print("</body"); // closing tags
        out.println("</html>");
    }

    /**
     * Finds the first occurrence of the given tag among the children of the
     * given {@code XMLTree} and return its index; returns -1 if not found.
     *
     * @param xml
     *            the {@code XMLTree} to search
     * @param tag
     *            the tag to look for
     * @return the index of the first child of type tag of the {@code XMLTree}
     *         or -1 if not found
     * @requires [the label of the root of xml is a tag]
     * @ensures <pre>
     * getChildElement =
     *  [the index of the first child of type tag of the {@code XMLTree} or
     *   -1 if not found]
     * </pre>
     */
    private static int getChildElement(XMLTree xml, String tag) {
        assert xml != null : "Violation of: xml is not null";
        assert tag != null : "Violation of: tag is not null";
        assert xml.isTag() : "Violation of: the label root of xml is a tag";

        /*
         * TODO: fill in body
         */
        int x = -1;
        for (int i = 0; i < xml.numberOfChildren(); i++) { //loops through every child in the xml
            XMLTree child = xml.child(i);
            if (child.label().equals(tag) && child.isTag()) { //find the first occurence of tag
                return i;
            }
        }
        return x;
    }

    /**
     * Processes one news item and outputs one table row. The row contains three
     * elements: the publication date, the source, and the title (or
     * description) of the item.
     *
     * @param item
     *            the news item
     * @param out
     *            the output stream
     * @updates out.content
     * @requires [the label of the root of item is an <item> tag] and
     *           out.is_open
     * @ensures <pre>
     * out.content = #out.content *
     *   [an HTML table row with publication date, source, and title of news item]
     * </pre>
     */
    private static void processItem(XMLTree item, SimpleWriter out) {
        assert item != null : "Violation of: item is not null";
        assert out != null : "Violation of: out is not null";
        assert item.isTag() && item.label().equals("item") : ""
                + "Violation of: the label root of item is an <item> tag";
        assert out.isOpen() : "Violation of: out.is_open";

        /*
         * TODO: fill in body
         */
        int tableDate = getChildElement(item, "pubDate"); //uses getChildElement to find pubDate
        if (tableDate > 0) {
            String newsDate = item.child(tableDate).child(0).label(); //inializes a variable to the tag of pubDate
            out.println("<tr>");
            out.println("<td>" + newsDate + "</td>");
        } else {
            out.println("<tr>");
            out.println("<td> No date available </td>");
        }

        int tableSource = getChildElement(item, "source"); //uses getChildElement to find source
        if (tableSource > 0) {
            String newsSource = item.child(tableSource).child(0).label();
            String url1 = item.child(tableSource).attributeValue("url");
            String hold2 = "<a href=\"" + url1 + "\">" + newsSource + "</a>";
            out.println("<td>" + hold2 + "</td>");
        } else {
            out.println("<td> No source available </td>");
        }

        int tableTitle = getChildElement(item, "title"); //uses getChildElement to find title
        if (tableTitle >= 0) {
            String newsTitle = item.child(tableTitle).child(0).label();
            int tableLink = getChildElement(item, "link"); //uses getChildElement to find link
            String newslink = item.child(tableLink).child(0).label();
            String hold3 = "<a href=\"" + newslink + "\">" + newsTitle + "</a>";
            out.println("<td>" + hold3 + "</td>");
        } else {
            out.println("<td> No title available </td>");
        }
    }

    /**
     * Main method.
     *
     * @param args
     *            the command line arguments; unused here
     */
    public static void main(String[] args) {
        SimpleReader in = new SimpleReader1L();
        SimpleWriter out = new SimpleWriter1L();

        out.print("Enter the URL of an RSS 2.0 news feed: ");
        String url = in.nextLine(); // collects url for user input

        XMLTree xml = new XMLTree1(url); //all creates new xml tree with url

        XMLTree channel = xml.child(0); // initalizes channel in xml tree

        out.print("Enter a html file: ");
        String fileName = in.nextLine(); // collects html file for user input

        SimpleWriter fileOut = new SimpleWriter1L(fileName);

        outputHeader(channel, fileOut);

        for (int i = 0; i < channel.numberOfChildren(); i++) { //loops through all children of channel
            if (channel.child(i).label().equals("item")) { //looks for which child is item
                processItem(channel.child(i), fileOut);
            }
        }

        outputFooter(fileOut); //outputs footer

        fileOut.close();
        in.close();
        out.close();
    }

}